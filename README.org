* Basic customization
** Others
#+BEGIN_SRC emacs-lisp

  (require 'package)
  (package-initialize)
#+END_SRC

  Maximize screen on starup
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+END_SRC

  Add additional package sources
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  #+END_SRC

  Add additional package sources
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  #+END_SRC

  In case I'm on work machine, use https instead of http
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    (package-initialize) ;; Important line for helm-gtags to be found. It initializes some installed packages (which cannot be initialized with their default auto-(require 'helm-gtags)  
  #+END_SRC

  Load updates from these sources. Or 'use-package' will not be available
  #+BEGIN_SRC emacs-lisp
    (when (not package-archive-contents)
      (package-refresh-contents))
  #+END_SRC


  Install 'use-package'
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
  #+END_SRC
  

  Make all the packages be loaded with 'use-package' instruction
  #+BEGIN_SRC emacs-lisp
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+END_SRC

  To enable emacs-client programm for committing
  #+BEGIN_SRC emacs-lisp
    (use-package server)
    (unless (server-running-p) (server-start))
  #+END_SRC
    
  Speedbar customization
  #+BEGIN_SRC emacs-lisp
    (use-package sr-speedbar)
    (global-set-key "\C-c\C-s" 'sr-speedbar-toggle)
    (setq speedbar-show-unknown-files t)
    (setq sr-speedbar-right-side nil)
    (setq sr-speedbar-skip-other-window-p t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/custom")
  #+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;; Disable startup-screen ;;;;;;;;;;
  ;(setq inhibit-startup-screen 1)

  ;;;;;;;;;; Show column number (along with line number) ;;;;;;;;;;
  ;;(column-number-mode 1)

  ;;;;;;;;;; Enable filebrowser on the left ;;;;;;;;;;
  ;;(global-set-key "\C-s\C-n" `neotree-toggle)


  ;; (global-set-key "\C-cb" 'windmove-left)
  ;; (global-set-key "\C-cf" 'windmove-right)
  ;; (global-set-key "\C-cp" 'windmove-up)
  ;; (global-set-key "\C-cn" 'windmove-down)
#+END_SRC
#+BEGIN_SRC emacs-lisp
 (require 'setup-general)
 (require 'setup-helm)
 (require 'setup-helm-gtags)
  ;(require 'setup-cedet)
  (require 'setup-editing)
  (require 'setup-c)
  (require 'setup-rtags)
#+END_SRC

** Org-mode
#+BEGIN_SRC emacs-lisp
    (define-key org-mode-map (kbd "C-c c") 'org-content)
#+END_SRC

* File system tree
** Open .pdf, .avi etc
#+BEGIN_SRC emacs-lisp
  (use-package openwith)
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
  (setq openwith-associations '(("\\.avi\\'" "vlc" (file))))
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
  ;;(define-key dired-mode-map (kbd "<return>")   'dired-find-alternate-file)
(eval-after-load "dired" '(progn
  (define-key dired-mode-map (kbd "C-M-u")   'dired-up-directory) ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun dired-get-size ()
    (interactive)
    (let ((files (dired-get-marked-files)))
      (with-temp-buffer
        (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
        (message "Size of all marked files: %s"
                 (progn
                   (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
                   (match-string 1))))))

  (define-key dired-mode-map (kbd "?") 'dired-get-size)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; (load "/home/vkocheganov/.emacs.d/elpa/dired-launch-20180607.1841/dired-launch.el")
  ;; (dired-launch-enable)
  ;; (setq dired-launch-default-launcher '("xdg-open"))
  ;; (load "/home/vkocheganov/Development/github_sources/emacs/custom/diredp.el")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  ;; (require 'sunrise)
#+END_SRC

* Fast folder access (<F*> keys)
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))
  (global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
  (global-set-key (kbd "C-<f5>") 'compile)

  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "/home/vkocheganov/mounted/NAS/homes_Viktor.Kocheganov/VDC/data/")))
  (global-set-key (kbd "<f7>") (lambda() (interactive)(find-file "/ssh:ts13:/home/vkocheganov/link_training/vic_models/")))
  (global-set-key (kbd "<f8>") (lambda() (interactive)(find-file "/ssh:dl4:/home/vkocheganov/VDC/VideoAnnotation/")))
#+END_SRC

* Languages
** C/C++

C++ IDE setup
Guide: https://tuhdo.github.io/c-ide.html

*** Generate tags
    Define function to create GTAGS files
    #+BEGIN_SRC emacs-lisp
      (defun create-tags (dir-name)
        "Create tags file."
        (interactive "DDirectory: ")
        (shell-command
         (format "gtags %s" (directory-file-name dir-name)))
        )
    #+END_SRC
    
*** Code-style
    Helm guide: https://tuhdo.github.io/helm-intro.html ;;;;;;;;;;
    Download helm-gtags: https://github.com/syohex/emacs-helm-gtags
    #+BEGIN_SRC emacs-lisp
        (defun my-c-mode-common-hook ()
        (c-set-style "Stroustrup")
        ;; Show lines
        (linum-mode 1)
        ;; Following command affects to c-toggle-auto-newline
        ;; That is automatically indent line after inserting
        ;; one of {, }, :, #, ;, ,, <, >, /, *, (, and ).
        (c-toggle-electric-state 1)
        ;; Indent size
        (setq c-basic-offset 4)
        ;; Enable autocomplition mode
        ;; (auto-complete-mode 1)
        ;; Do not insert new line after ';' or ','
        (setq c-hanging-semi&comma-criteria nil)
        (setq comment-start "//"  comment-end   "")
        )
      (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
    #+END_SRC
    
** Python
  #+BEGIN_SRC emacs-lisp
    (setq python-command "/usr/bin/python3.4")
    ;; (use-package posframe)
    (use-package anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-mode)
    (eval-after-load 'python
      '(define-key python-mode-map "\C-xpb" 'python-nav-backward-block))
    (eval-after-load 'python
      '(define-key python-mode-map "\C-xpl" 'python-nav-backward-up-list))
    (eval-after-load 'python
      '(define-key python-mode-map "\C-xpf" 'python-nav-forward-block))
    (eval-after-load 'python
      '(define-key python-mode-map "\C-xpm" 'python-mark-defun))
    (eval-after-load 'python
      '(define-key python-mode-map "\C-xpm" 'python-mark-defun))
    (eval-after-load 'python
      '(define-key python-mode-map "\M-i" 'anaconda-mode-complete))
  #+END_SRC



#+BEGIN_SRC emacs-lisp
  
#+END_SRC


#+BEGIN_SRC emacs-lisp
  
#+END_SRC


#+BEGIN_SRC emacs-lisp
  
#+END_SRC


#+BEGIN_SRC emacs-lisp
  
#+END_SRC


#+BEGIN_SRC emacs-lisp
  
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  ;; (defun my-lua-mode-hook ()
  ;;   (setq lua-indent-level 4)
  ;;   )
  ;; (add-hook 'lua-mode-hook 'my-lua-mode-hook)
#+END_SRC

* Shell/terminals
** Shell
For proper processing of shell colors
#+BEGIN_SRC emacs-lisp
  (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;  (global-set-key "\M-\r" 'shell-resync-dirs)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;
  ;;;;;;;;;; To get colorized output from shell-mode ;;;;;;;;;;
  ;;
  ;; (require 'ansi-color)
  ;; (defun ansi-color-apply-on-buffer ()
  ;;     (ansi-color-apply-on-region (point-min) (point-max)))
  ;; (defun ansi-color-apply-on-minibuffer ()
  ;;   (let ((bufs (remove-if-not
  ;;                (lambda (x) (string-starts-with (buffer-name x) " *Echo Area"))
  ;;                (buffer-list))))
  ;;     (dolist (buf bufs)
  ;;       (with-current-buffer buf
  ;;         (ansi-color-apply-on-buffer)))))
  ;; (defun ansi-color-apply-on-minibuffer-advice (proc &rest rest)
  ;;   (ansi-color-apply-on-minibuffer))
  ;; (advice-add 'shell-command :after #'ansi-color-apply-on-minibuffer-advice)
  ;; (advice-remove 'shell-command #'ansi-color-apply-on-minibuffer-advice)
  ;; (defun add-test-function (cmd)
  ;;   (interactive "sCommand to run: ")
  ;;   (setq my-testall-test-function cmd)
  ;;   (defun my-testall ()
  ;;     (interactive)
  ;;     (shell-command my-testall-test-function))
  ;;   (local-set-key [f9] 'my-testall))
  ;; (defun my-shell-execute(cmd)
  ;;   (interactive "sShell command: ")
  ;;   (shell (get-buffer-create "my-shell-buf"))
  ;;   (process-send-string (get-buffer-process "my-shell-buf") (concat cmd "\n")))
  ;; (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

** Term
#+BEGIN_SRC emacs-lisp
  ;; (use-package multi-term)
  ;; (setq multi-term-program "/bin/bash")
  ;; (define-key term-raw-map (kbd "C-c C-j") 'term-line-mode)

  ;; (add-to-list 'load-path "/home/vkocheganov/thirdparty/emacs-libvterm/")
  ;; (require 'vterm)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun vterm--rename-buffer-as-title (title)
    (let ((dir (string-trim-left (concat (nth 1 (split-string title ":")) "/"))))
      (cd-absolute dir)
      ))
  (add-hook 'vterm-set-title-functions #'vterm--rename-buffer-as-title)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (global-unset-key "\C-xm")
  (global-set-key (kbd "\C-xms") 'magit-status)
#+END_SRC

* Usefull routines
** htop
#+BEGIN_SRC emacs-lisp
  (defun htop ()
    (interactive)
    (if (get-buffer "*htop*")
        (switch-to-buffer "*htop*")
      (ansi-term "/bin/bash" "htop")
      (comint-send-string "*htop*" "htop\n")))
#+END_SRC

* Uncle Dave stuff
#+BEGIN_SRC emacs-lisp
  
#+END_SRC

